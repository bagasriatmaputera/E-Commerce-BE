1. npm init -y

2. npm install jsonwebtoken cookie-parser bcrypt cors dotenv express multer prisma @prisma/client 
    bcrypt → untuk hashing password sebelum disimpan ke database, supaya lebih aman.
    jsonwebtoken (JWT) → untuk autentikasi (generate & verifikasi token login user).
    prisma → ORM (Object Relational Mapping), membantu mengelola database dengan query lebih mudah.
    @prisma/client → library yang dipakai di project untuk akses database via Prisma (hasil generate dari schema).
    express → framework Node.js untuk membangun REST API (routing, middleware, request/response).
    cookie-parser → middleware untuk baca & parse cookie dari request (misalnya simpan token login).
    cors → mengatur Cross-Origin Resource Sharing, agar frontend (React) bisa request ke backend (Express).
    dotenv → untuk menyimpan konfigurasi sensitif (seperti DB_URL, JWT_SECRET) di file .env.
    multer → middleware untuk upload file (misalnya upload gambar produk).

3. npm install nodemon --save-dev
    nodemon itu agar tidak perlu refresshh local server ketika ada perubahan

4. buat file sever.js dan .env

5 buat folder dan rapihkan struktur path 
    src/
        controllers
        middlewares
        routes
        utils
        config

6. pada server.js tambahkan berikut ini
    import express from "express";
    import doenv from "dotenv";
    import cors from "cors";
    import cookieParser from "cookie-parser";
    
7. pada server.js tambahkan
    import authRoutes from "./routes/auth.route.js";
    import inventoryRoutes from "./routes/inventories.route.js";
    import productRoutes from "./routes/product.route.js";
    import cartRoutes from "./routes/cart.route.js";
    import invoiceRoutes from "./routes/invoice.route.js";
    import statisticRoutes from "./routes/invoice.route.js";

8. Tambahkan ini di server.js
    // port
    const PORT = process.env.PORT || 5000;

    // middleware
    app.use(cookieParser());
    app.use(express.json());
    app.use(express.urlencoded({extended: true}));
    app.use(cors())

    // Routes
    app.use("/api/auth", authRoutes);
    app.use("/api/inventories", inventoryRoutes);
    app.use("/api/products", productRoutes);
    app.use("/api/cart", cartRoutes);
    app.use("/api/invoice", invoiceRoutes);
    app.use("/api/statistic", statisticRoutes);

    app.listen(PORT, () => {
        console.log(`Server running on http://localhost:${PORT}`)
    })

9. pada folder utils, tambahakan response.js cookieOptions.js

10. pada response.js, tambahkan function handle successRespone dan errorResponse
    export const successResponse = (res, message, data = null, status = 200) => {
        return res.status(status).json({
            success: true,
            message,
            data
        })
    }

    export const errorResponse = (res, message, data = null, status = 200) => {
        return res.status(status).json({
            success: false,
            message,
            data
        })
    }

11. pada file cookieOptions, tambahkan berikut ini untuk atur cookies
    const cookieOptions = (req) => {
        const isProduction = process.env.NODE_ENV === "producton"

        return {
            httpOnly: true,
            secure: isProduction && req.hostname !== "localhost",
            sameSite: "Strict",
            path:"/",
            maxAge: 24 * 60 * 60 * 1000, // 1 hari
        }
    }

    - pada file .env tambahkan NODE_ENV = localhost

    export default cookieOptions;

12. pada folder middleware, tambahkan file 
    uploud.js -> untuk multer
    verifyToken.js -> untuk jsonwebtoken (JWT)

13. pada file middleware/verifyToken.js, tambahkan
    import jwt from 'jsonwebtoken';

    const JWT_SECRET = process.env.JWT_SECRET || "secret"

    const verifyToken = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if(!authHeader) return res.status(401).json({ error: "Token Required"})

    const token = authHeader.split('')[1];

    try {
        const decode = jwt.verify(token, JWT_SECRET);
        req.user = decode;
        next();
    } catch (error) {
        res.status(401).json({ error: "Token tidak valid"})
    }
    }

    - pada file .env, tambahkan JWT_SECRET = **random**
